name: Check Approval Comments

on:
  issue_comment:
    types: [created, edited]
  pull_request:
    types: [opened, synchronize, reopened]
  pull_request_review:
    types: [submitted, edited, dismissed]

env:
  REQUIRED_APPROVALS: 1

jobs:
  check-approvals:
    runs-on: ubuntu-latest
    # –£–±–∏—Ä–∞–µ–º —É—Å–ª–æ–≤–∏–µ –æ—Ç—Å—é–¥–∞ - –ø—Ä–æ–≤–µ—Ä–∏–º –≤–Ω—É—Ç—Ä–∏
    
    steps:
      - name: Count Approvals
        uses: actions/github-script@v7
        env:
          REQUIRED: ${{ env.REQUIRED_APPROVALS }}
        with:
          script: |
            const REQUIRED = parseInt(process.env.REQUIRED);
            
            // –ß—Ç–æ —Å—á–∏—Ç–∞–µ–º –∑–∞ –∞–ø—Ä—É–≤
            const isApproval = (text) => {
              const t = text.trim().toLowerCase();
              return t === 'üëç';
            };
            
            // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä PR –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ–±—ã—Ç–∏—è
            let prNumber, pr;
            
            if (context.eventName === 'pull_request' || context.eventName === 'pull_request_review') {
              prNumber = context.payload.pull_request.number;
              pr = context.payload.pull_request;
            } else if (context.eventName === 'issue_comment') {
              prNumber = context.payload.issue.number;
              // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ PR
              const prData = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber
              });
              pr = prData.data;
            }
            
            console.log(`üìù Checking PR #${prNumber}`);
            console.log(`üë§ PR Author: ${pr.user.login}`);
            
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });
            
            console.log(`üí¨ Total comments: ${comments.data.length}`);
            
            const approvers = new Set();
            
            for (const comment of comments.data) {
              console.log(`Comment by ${comment.user.login}: "${comment.body.trim()}"`);
              
              if (isApproval(comment.body) && 
                  comment.user.login !== pr.user.login) {
                approvers.add(comment.user.login);
                console.log(`‚úÖ Approval counted from: ${comment.user.login}`);
              }
            }
            
            const count = approvers.size;
            const passed = count >= REQUIRED;
            
            console.log(`\nüìä Summary:`);
            console.log(`Required: ${REQUIRED}`);
            console.log(`Got: ${count}`);
            console.log(`Approvers: ${Array.from(approvers).join(', ') || 'none'}`);
            
            // –°–æ–∑–¥–∞—ë–º —Å—Ç–∞—Ç—É—Å
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: pr.head.sha,
              state: passed ? 'success' : 'failure',
              context: 'approvals',
              description: `${count}/${REQUIRED} approvals: ${Array.from(approvers).join(', ') || 'none'}`,
            });
            
            if (!passed) {
              core.setFailed(`Need ${REQUIRED - count} more approval(s)`);
            } else {
              console.log('‚úÖ All checks passed! PR has enough approvals.');
              core.info(`‚úÖ Success! PR approved by ${count} reviewers: ${Array.from(approvers).join(', ')}`);
            }
