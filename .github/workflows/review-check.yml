name: Check Approval Comments

on:
  issue_comment:
    types: [created, edited]
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  check-approvals:
    runs-on: ubuntu-latest
    if: github.event.pull_request != null || github.event.issue.pull_request != null
    
    steps:
      - name: Count Approvals
        uses: actions/github-script@v7
        with:
          script: |
            const REQUIRED = 2;
            
            // Что считаем за апрув
            const isApproval = (text) => {
              const t = text.trim().toLowerCase();
              return t === '👍';
            };
            
            const prNumber = context.payload.pull_request?.number || 
                           context.payload.issue?.number;
            
            const pr = context.payload.pull_request || 
                      (await github.rest.pulls.get({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        pull_number: prNumber
                      })).data;
            
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });
            
            const approvers = new Set();
            
            for (const comment of comments.data) {
              if (isApproval(comment.body) && 
                  comment.user.login !== pr.user.login) {
                approvers.add(comment.user.login);
              }
            }
            
            const count = approvers.size;
            const passed = count >= REQUIRED;
            
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: pr.head.sha,
              state: passed ? 'success' : 'pending',
              context: 'approvals',
              description: `${count}/${REQUIRED} approvals: ${Array.from(approvers).join(', ') || 'none'}`,
            });
            
            if (!passed) {
              core.setFailed(`Need ${REQUIRED - count} more`);
            }
