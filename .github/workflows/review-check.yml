name: Check Approval Comments

on:
  pull_request_review:
    types: [submitted, edited, dismissed]

env:
  REQUIRED_APPROVALS: 1

jobs:
  check-approvals:
    runs-on: ubuntu-latest
    
    steps:
      - name: Count Approvals
        uses: actions/github-script@v7
        env:
          REQUIRED: ${{ env.REQUIRED_APPROVALS }}
        with:
          script: |
            const REQUIRED = parseInt(process.env.REQUIRED);
            const prNumber = context.payload.pull_request.number;
            const prAuthor = context.payload.pull_request.user.login;
            
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ reviews
            const reviews = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber,
            });
            
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });
            
            const approvers = new Set();
            
            // –°—á–∏—Ç–∞–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ reviews —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º APPROVED
            for (const review of reviews.data) {
              if (review.state === 'APPROVED' && review.user.login !== prAuthor) {
                approvers.add(review.user.login);
              }
            }
            
            // –°—á–∏—Ç–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å üëç
            for (const comment of comments.data) {
              if (comment.body.trim() === 'üëç' && comment.user.login !== prAuthor) {
                approvers.add(comment.user.login);
              }
            }
            
            const count = approvers.size;
            const passed = count >= REQUIRED;
            const approversList = Array.from(approvers).join(', ') || 'none';
            
            // –°–æ–∑–¥–∞—ë–º —Å—Ç–∞—Ç—É—Å
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.payload.pull_request.head.sha,
              state: passed ? 'success' : 'failure',
              context: 'approvals',
              description: `${count}/${REQUIRED} approvals: ${approversList}`,
            });
            
            if (!passed) {
              core.setFailed(`Need ${REQUIRED - count} more approval(s)`);
            }
